[
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "create_model",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "HelloRequest",
        "importPath": "models.request",
        "description": "models.request",
        "isExtraImport": true,
        "detail": "models.request",
        "documentation": {}
    },
    {
        "label": "WeatherRequest",
        "importPath": "models.request",
        "description": "models.request",
        "isExtraImport": true,
        "detail": "models.request",
        "documentation": {}
    },
    {
        "label": "WeatherInput",
        "importPath": "models.request",
        "description": "models.request",
        "isExtraImport": true,
        "detail": "models.request",
        "documentation": {}
    },
    {
        "label": "HelloResponse",
        "importPath": "models.response",
        "description": "models.response",
        "isExtraImport": true,
        "detail": "models.response",
        "documentation": {}
    },
    {
        "label": "WeatherResponse",
        "importPath": "models.response",
        "description": "models.response",
        "isExtraImport": true,
        "detail": "models.response",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "APIRoute",
        "importPath": "fastapi.routing",
        "description": "fastapi.routing",
        "isExtraImport": true,
        "detail": "fastapi.routing",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "FastMCP",
        "importPath": "mcp.server.fastmcp",
        "description": "mcp.server.fastmcp",
        "isExtraImport": true,
        "detail": "mcp.server.fastmcp",
        "documentation": {}
    },
    {
        "label": "MCPServer",
        "importPath": "mbxai.mcp.server",
        "description": "mbxai.mcp.server",
        "isExtraImport": true,
        "detail": "mbxai.mcp.server",
        "documentation": {}
    },
    {
        "label": "get_weather",
        "importPath": "project.weather",
        "description": "project.weather",
        "isExtraImport": true,
        "detail": "project.weather",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "CSRFProtect",
        "importPath": "flask_wtf.csrf",
        "description": "flask_wtf.csrf",
        "isExtraImport": true,
        "detail": "flask_wtf.csrf",
        "documentation": {}
    },
    {
        "label": "FlaskForm",
        "importPath": "flask_wtf",
        "description": "flask_wtf",
        "isExtraImport": true,
        "detail": "flask_wtf",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Celery",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "group",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "AsyncResult",
        "importPath": "celery.result",
        "description": "celery.result",
        "isExtraImport": true,
        "detail": "celery.result",
        "documentation": {}
    },
    {
        "label": "GroupResult",
        "importPath": "celery.result",
        "description": "celery.result",
        "isExtraImport": true,
        "detail": "celery.result",
        "documentation": {}
    },
    {
        "label": "redis",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "redis",
        "description": "redis",
        "detail": "redis",
        "documentation": {}
    },
    {
        "label": "httpx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "httpx",
        "description": "httpx",
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "AsyncAgentClient",
        "importPath": "mbxai.agent",
        "description": "mbxai.agent",
        "isExtraImport": true,
        "detail": "mbxai.agent",
        "documentation": {}
    },
    {
        "label": "OpenRouterModel",
        "importPath": "mbxai.openrouter",
        "description": "mbxai.openrouter",
        "isExtraImport": true,
        "detail": "mbxai.openrouter",
        "documentation": {}
    },
    {
        "label": "AsyncOpenRouterClient",
        "importPath": "mbxai.openrouter",
        "description": "mbxai.openrouter",
        "isExtraImport": true,
        "detail": "mbxai.openrouter",
        "documentation": {}
    },
    {
        "label": "AsyncMCPClient",
        "importPath": "mbxai.mcp",
        "description": "mbxai.mcp",
        "isExtraImport": true,
        "detail": "mbxai.mcp",
        "documentation": {}
    },
    {
        "label": "AsyncToolClient",
        "importPath": "mbxai.tools",
        "description": "mbxai.tools",
        "isExtraImport": true,
        "detail": "mbxai.tools",
        "documentation": {}
    },
    {
        "label": "chromadb",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "chromadb",
        "description": "chromadb",
        "detail": "chromadb",
        "documentation": {}
    },
    {
        "label": "Settings",
        "importPath": "chromadb.config",
        "description": "chromadb.config",
        "isExtraImport": true,
        "detail": "chromadb.config",
        "documentation": {}
    },
    {
        "label": "embedding_functions",
        "importPath": "chromadb.utils",
        "description": "chromadb.utils",
        "isExtraImport": true,
        "detail": "chromadb.utils",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "importlib.metadata",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "importlib.metadata",
        "description": "importlib.metadata",
        "detail": "importlib.metadata",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "SettingsConfigDict",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "HelloRequest",
        "kind": 6,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.project.models.request",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.project.models.request",
        "peekOfCode": "class HelloRequest(BaseModel):\n    \"\"\"Hello world request model.\"\"\"\n    name: str = Field(\"World\", description=\"Name to greet\")\nclass WeatherRequest(BaseModel):\n    \"\"\"Weather request model.\"\"\"\n    location: str = Field(..., description=\"Location to get weather for\")",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.project.models.request",
        "documentation": {}
    },
    {
        "label": "WeatherRequest",
        "kind": 6,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.project.models.request",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.project.models.request",
        "peekOfCode": "class WeatherRequest(BaseModel):\n    \"\"\"Weather request model.\"\"\"\n    location: str = Field(..., description=\"Location to get weather for\")",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.project.models.request",
        "documentation": {}
    },
    {
        "label": "HelloResponse",
        "kind": 6,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.project.models.response",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.project.models.response",
        "peekOfCode": "class HelloResponse(BaseModel):\n    \"\"\"Hello world response model.\"\"\"\n    message: str\n    name: str\nclass WeatherResponse(BaseModel):\n    \"\"\"Weather response model.\"\"\"\n    weather_info: str",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.project.models.response",
        "documentation": {}
    },
    {
        "label": "WeatherResponse",
        "kind": 6,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.project.models.response",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.project.models.response",
        "peekOfCode": "class WeatherResponse(BaseModel):\n    \"\"\"Weather response model.\"\"\"\n    weather_info: str",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.project.models.response",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.project.api",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.project.api",
        "peekOfCode": "router = APIRouter(prefix=\"/api\", tags=[\"api\"])",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.project.api",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.project.demo",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.project.demo",
        "peekOfCode": "router = APIRouter(prefix=\"/api\", tags=[\"api\"])\nlogger = logging.getLogger(__name__)\n@router.post(\"/hello\", response_model=HelloResponse)\nasync def hello_world(request: HelloRequest) -> HelloResponse:\n    \"\"\"A simple hello world endpoint.\n    This is an example of a project-level endpoint that is automatically\n    included in the main API.\n    \"\"\"\n    return HelloResponse(\n        message=f\"Hello, {request.name}!\",",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.project.demo",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.project.demo",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.project.demo",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@router.post(\"/hello\", response_model=HelloResponse)\nasync def hello_world(request: HelloRequest) -> HelloResponse:\n    \"\"\"A simple hello world endpoint.\n    This is an example of a project-level endpoint that is automatically\n    included in the main API.\n    \"\"\"\n    return HelloResponse(\n        message=f\"Hello, {request.name}!\",\n        name=request.name,",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.project.demo",
        "documentation": {}
    },
    {
        "label": "MbxDefinitionBuilder",
        "kind": 6,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.definition",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.definition",
        "peekOfCode": "class MbxDefinitionBuilder:\n    \"\"\"Builder for API definition information.\n    This class extracts information about API endpoints including:\n    - Path\n    - HTTP Method\n    - Request schema\n    - Response schema\n    It excludes specified endpoints from the definition.\n    \"\"\"\n    def __init__(self, app: FastAPI, excluded_paths: Optional[Set[str]] = None):",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.definition",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.run",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.run",
        "peekOfCode": "def main():\n    \"\"\"Run the FastAPI server.\"\"\"\n    parser = argparse.ArgumentParser(description=f\"Run the {config.name} API server\")\n    parser.add_argument(\n        \"--host\", type=str, default=\"0.0.0.0\", help=\"Host to bind the server to\"\n    )\n    parser.add_argument(\n        \"--port\", type=int, default=5000, help=\"Port to bind the server to\"\n    )\n    parser.add_argument(",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.run",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.run",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.run",
        "peekOfCode": "config = get_config()\nlogging.basicConfig(\n    level=config.log_level,\n    format=\"%(asctime)s - %(levelname)s - %(name)s:%(lineno)d - %(message)s\",\n    handlers=[\n        logging.StreamHandler(),\n    ],\n)\nlogger = logging.getLogger(__name__)\ndef main():",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.run",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.run",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.run",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef main():\n    \"\"\"Run the FastAPI server.\"\"\"\n    parser = argparse.ArgumentParser(description=f\"Run the {config.name} API server\")\n    parser.add_argument(\n        \"--host\", type=str, default=\"0.0.0.0\", help=\"Host to bind the server to\"\n    )\n    parser.add_argument(\n        \"--port\", type=int, default=5000, help=\"Port to bind the server to\"\n    )",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.run",
        "documentation": {}
    },
    {
        "label": "IdentResponse",
        "kind": 6,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.server",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.server",
        "peekOfCode": "class IdentResponse(BaseModel):\n    \"\"\"Identity response model.\"\"\"\n    name: str\n    version: str\n@app.get(\"/ident\", response_model=IdentResponse)\nasync def ident() -> IdentResponse:\n    \"\"\"Return basic service identity information.\"\"\"\n    config = get_config()\n    return IdentResponse(\n        name=config.name,",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.server",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.server",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.server",
        "peekOfCode": "app = FastAPI(\n    title=\"{{cookiecutter.project_name}}\",\n    description=\"{{cookiecutter.description}}\",\n)\n# Include project routers\napp.include_router(project_router)\napp.include_router(demo_router)\nclass IdentResponse(BaseModel):\n    \"\"\"Identity response model.\"\"\"\n    name: str",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.api.server",
        "documentation": {}
    },
    {
        "label": "WeatherInput",
        "kind": 6,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.mcp.project.models.request",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.mcp.project.models.request",
        "peekOfCode": "class WeatherInput(BaseModel):\n    location: str\n    units: str = \"celsius\"  # Default to celsius, can be \"fahrenheit\" or \"celsius\"",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.mcp.project.models.request",
        "documentation": {}
    },
    {
        "label": "mcp",
        "kind": 5,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.mcp.project.weather",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.mcp.project.weather",
        "peekOfCode": "mcp = FastMCP(\"weather\")\n@mcp.tool()\nasync def get_weather(input: WeatherInput) -> dict[str, Any]:\n    \"\"\"Get weather information for a location.\n    Args:\n        input: WeatherInput model containing location and units preference\n    \"\"\"\n    # This is a mock implementation\n    temperature = 20 if input.units == \"celsius\" else 68  # Convert to fahrenheit if needed\n    return {",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.mcp.project.weather",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.mcp.app",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.mcp.app",
        "peekOfCode": "config = get_config()\n# Import the tools\nfrom project.weather import get_weather\n# Initialize mbxai server\nserver = MCPServer(\n    name=config.name,\n    description=config.description\n)\n# Get the FastAPI app from the mbxai server\napp = server.app",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.mcp.app",
        "documentation": {}
    },
    {
        "label": "server",
        "kind": 5,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.mcp.app",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.mcp.app",
        "peekOfCode": "server = MCPServer(\n    name=config.name,\n    description=config.description\n)\n# Get the FastAPI app from the mbxai server\napp = server.app\n# Function to register tools\nasync def register_tools():\n    \"\"\"Register all tools with the server.\"\"\"\n    await server.add_tool(get_weather)",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.mcp.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.mcp.app",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.mcp.app",
        "peekOfCode": "app = server.app\n# Function to register tools\nasync def register_tools():\n    \"\"\"Register all tools with the server.\"\"\"\n    await server.add_tool(get_weather)",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.mcp.app",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.mcp.run",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.mcp.run",
        "peekOfCode": "def main():\n    \"\"\"Entry point for the service.\"\"\"\n    asyncio.run(async_main())\nif __name__ == \"__main__\":\n    main()",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.mcp.run",
        "documentation": {}
    },
    {
        "label": "create_app",
        "kind": 2,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.ui.app",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.ui.app",
        "peekOfCode": "def create_app() -> Flask:\n    \"\"\"Create and configure the Flask application.\"\"\"\n    app = Flask(__name__)\n    # Load configuration\n    config = get_ui_config()\n    app.config.from_object(config)\n    app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'dev-secret-key')\n    app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max file size\n    # Configure logging\n    if config.DEBUG:",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.ui.app",
        "documentation": {}
    },
    {
        "label": "run_dev_server",
        "kind": 2,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.ui.app",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.ui.app",
        "peekOfCode": "def run_dev_server() -> None:\n    \"\"\"Run development server.\"\"\"\n    app = create_app()\n    config = get_ui_config()\n    app.run(\n        host=config.HOST,\n        port=config.PORT,\n        debug=config.DEBUG\n    )\ndef run_server() -> None:",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.ui.app",
        "documentation": {}
    },
    {
        "label": "run_server",
        "kind": 2,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.ui.app",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.ui.app",
        "peekOfCode": "def run_server() -> None:\n    \"\"\"Run production server.\"\"\"\n    app = create_app()\n    config = get_ui_config()\n    app.run(\n        host=config.HOST,\n        port=config.PORT,\n        debug=False\n    )\nif __name__ == \"__main__\":",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.ui.app",
        "documentation": {}
    },
    {
        "label": "CeleryClient",
        "kind": 6,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.celery_client",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.celery_client",
        "peekOfCode": "class CeleryClient:\n    \"\"\"Client for sending and receiving messages through Celery with RabbitMQ and Redis.\"\"\"\n    def __init__(self, app_name: str = \"{{cookiecutter.package_name}}\"):\n        \"\"\"Initialize the Celery client.\n        Args:\n            app_name: Name of the Celery application\n        \"\"\"\n        self.app_name = app_name\n        self._app = None\n        self._setup_celery()",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.celery_client",
        "documentation": {}
    },
    {
        "label": "get_celery_client",
        "kind": 2,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.celery_client",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.celery_client",
        "peekOfCode": "def get_celery_client() -> CeleryClient:\n    \"\"\"Get a singleton instance of the Celery client.\n    Returns:\n        CeleryClient instance configured with environment settings\n    \"\"\"\n    return CeleryClient()\n# Convenience functions for common operations\ndef send_task(\n    task_name: str,\n    args: tuple[Any, ...] | None = None,",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.celery_client",
        "documentation": {}
    },
    {
        "label": "send_task",
        "kind": 2,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.celery_client",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.celery_client",
        "peekOfCode": "def send_task(\n    task_name: str,\n    args: tuple[Any, ...] | None = None,\n    kwargs: dict[str, Any] | None = None,\n    queue: str | None = None,\n    **options: Any\n) -> str:\n    \"\"\"Send a task using the singleton Celery client.\n    Args:\n        task_name: Name of the task to execute",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.celery_client",
        "documentation": {}
    },
    {
        "label": "get_task_result",
        "kind": 2,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.celery_client",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.celery_client",
        "peekOfCode": "def get_task_result(task_id: str, timeout: float | None = None) -> Any:\n    \"\"\"Get the result of a task using the singleton Celery client.\n    Args:\n        task_id: ID of the task\n        timeout: Timeout in seconds to wait for the result\n    Returns:\n        The task result\n    \"\"\"\n    client = get_celery_client()\n    return client.get_task_result(task_id, timeout)",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.celery_client",
        "documentation": {}
    },
    {
        "label": "get_task_status",
        "kind": 2,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.celery_client",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.celery_client",
        "peekOfCode": "def get_task_status(task_id: str) -> str:\n    \"\"\"Get the status of a task using the singleton Celery client.\n    Args:\n        task_id: ID of the task\n    Returns:\n        Task status (PENDING, STARTED, SUCCESS, FAILURE, RETRY, REVOKED)\n    \"\"\"\n    client = get_celery_client()\n    return client.get_task_status(task_id)\ndef send_bulk_tasks(",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.celery_client",
        "documentation": {}
    },
    {
        "label": "send_bulk_tasks",
        "kind": 2,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.celery_client",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.celery_client",
        "peekOfCode": "def send_bulk_tasks(\n    tasks: list[dict[str, Any]],\n    queue: str | None = None,\n    **options: Any\n) -> list[str]:\n    \"\"\"Send multiple tasks as a bulk operation using the singleton Celery client.\n    Args:\n        tasks: List of task dictionaries, each containing:\n               - task_name: Name of the task to execute\n               - args: Optional positional arguments for the task",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.celery_client",
        "documentation": {}
    },
    {
        "label": "send_bulk_tasks_as_group",
        "kind": 2,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.celery_client",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.celery_client",
        "peekOfCode": "def send_bulk_tasks_as_group(\n    tasks: list[dict[str, Any]],\n    queue: str | None = None,\n    **options: Any\n) -> str:\n    \"\"\"Send multiple tasks as a Celery group using the singleton Celery client.\n    Args:\n        tasks: List of task dictionaries, each containing:\n               - task_name: Name of the task to execute\n               - args: Optional positional arguments for the task",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.celery_client",
        "documentation": {}
    },
    {
        "label": "wait_for_all_tasks",
        "kind": 2,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.celery_client",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.celery_client",
        "peekOfCode": "def wait_for_all_tasks(\n    task_ids: list[str],\n    timeout: float | None = None,\n    poll_interval: float = 1.0\n) -> dict[str, Any]:\n    \"\"\"Wait for all tasks in a list to complete using the singleton Celery client.\n    Args:\n        task_ids: List of task IDs to wait for\n        timeout: Total timeout in seconds to wait for all tasks\n        poll_interval: How often to check task status (in seconds)",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.celery_client",
        "documentation": {}
    },
    {
        "label": "wait_for_group",
        "kind": 2,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.celery_client",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.celery_client",
        "peekOfCode": "def wait_for_group(\n    group_id: str,\n    timeout: float | None = None,\n    poll_interval: float = 1.0\n) -> dict[str, Any]:\n    \"\"\"Wait for a Celery group to complete using the singleton Celery client.\n    Args:\n        group_id: ID of the group to wait for\n        timeout: Timeout in seconds to wait for the group\n        poll_interval: How often to check group status (in seconds)",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.celery_client",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.celery_client",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.celery_client",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass CeleryClient:\n    \"\"\"Client for sending and receiving messages through Celery with RabbitMQ and Redis.\"\"\"\n    def __init__(self, app_name: str = \"{{cookiecutter.package_name}}\"):\n        \"\"\"Initialize the Celery client.\n        Args:\n            app_name: Name of the Celery application\n        \"\"\"\n        self.app_name = app_name\n        self._app = None",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.celery_client",
        "documentation": {}
    },
    {
        "label": "ServiceApiClient",
        "kind": 6,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.client",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.client",
        "peekOfCode": "class ServiceApiClient:\n    \"\"\"Client for making API calls to other services using direct calls or the job system.\"\"\"\n    def __init__(self, timeout: int = 3600, max_retries: int = 3, retry_delay: int = 5, poll_interval: int = 10):\n        \"\"\"Initialize the service API client.\n        Args:\n            timeout: Overall timeout in seconds (default: 3600s = 60 minutes)\n            max_retries: Maximum number of retries for 503 errors (default: 3)\n            retry_delay: Delay between retries in seconds (default: 5)\n            poll_interval: Interval in seconds to poll for job status (default: 10)\n        Raises:",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.client",
        "documentation": {}
    },
    {
        "label": "ChromaCollectionManager",
        "kind": 6,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.vector",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.vector",
        "peekOfCode": "class ChromaCollectionManager:\n    \"\"\"\n    A utility class for managing ChromaDB collections with OpenAI embeddings.\n    This class provides a clean interface for creating, retrieving, listing,\n    and deleting collections in ChromaDB using OpenAI's embedding models.\n    \"\"\"\n    def __init__(\n        self,\n        chromadb_config: ChromaDBConfig | None = None,\n        openai_config: OpenAIConfig | None = None,",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.vector",
        "documentation": {}
    },
    {
        "label": "create_collection_manager",
        "kind": 2,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.vector",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.vector",
        "peekOfCode": "def create_collection_manager(\n    chromadb_config: ChromaDBConfig | None = None,\n    openai_config: OpenAIConfig | None = None,\n) -> ChromaCollectionManager:\n    \"\"\"\n    Factory function to create a ChromaCollectionManager instance.\n    Args:\n        chromadb_config: Optional ChromaDB configuration. Uses environment if None.\n        openai_config: Optional OpenAI configuration. Uses environment if None.\n    Returns:",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.vector",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.vector",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.vector",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef _convert_list_metadata_for_chromadb(metadata: dict[str, Any]) -> dict[str, Any]:\n    \"\"\"\n    Convert list values in metadata to comma-separated strings for ChromaDB compatibility.\n    ChromaDB metadata only supports scalar values (string, int, float, bool).\n    This function converts list values to comma-separated strings.\n    Args:\n        metadata: Original metadata dictionary that may contain lists\n    Returns:\n        Metadata dictionary with lists converted to comma-separated strings",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.utils.vector",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.worker.run",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.worker.run",
        "peekOfCode": "def main() -> None:\n    \"\"\"Main entry point for the Celery worker.\"\"\"\n    # Setup logging\n    logging.basicConfig(\n        level=logging.INFO,\n        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n        handlers=[logging.StreamHandler(sys.stdout)]\n    )\n    logger = logging.getLogger(__name__)\n    # Get Celery configuration",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.worker.run",
        "documentation": {}
    },
    {
        "label": "example_task",
        "kind": 2,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.worker.tasks",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.worker.tasks",
        "peekOfCode": "def example_task(self, data: dict[str, Any]) -> dict[str, Any]:\n    \"\"\"Example Celery task.\n    Args:\n        self: Task instance (bound)\n        data: Input data to process\n    Returns:\n        Processed result\n    Example:\n        from {{cookiecutter.package_name}}.utils import send_task\n        task_id = send_task(",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.worker.tasks",
        "documentation": {}
    },
    {
        "label": "long_running_task",
        "kind": 2,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.worker.tasks",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.worker.tasks",
        "peekOfCode": "def long_running_task(duration: int = 10) -> str:\n    \"\"\"Example long-running task.\n    Args:\n        duration: How long to run (in seconds)\n    Returns:\n        Completion message\n    Example:\n        from {{cookiecutter.package_name}}.utils import send_task\n        task_id = send_task(\n            '{{cookiecutter.package_name}}.worker.tasks.long_running_task',",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.worker.tasks",
        "documentation": {}
    },
    {
        "label": "ai_processing_task",
        "kind": 2,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.worker.tasks",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.worker.tasks",
        "peekOfCode": "def ai_processing_task(prompt: str, model: str = \"gpt-4o-mini\") -> dict[str, Any]:\n    \"\"\"Example AI processing task using the MCP client.\n    Args:\n        prompt: The prompt to process\n        model: AI model to use\n    Returns:\n        AI response data\n    Example:\n        from {{cookiecutter.package_name}}.utils import send_task\n        task_id = send_task(",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.worker.tasks",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.worker.tasks",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.worker.tasks",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# Get the Celery app instance\ncelery_app = get_celery_client().app\n@celery_app.task(bind=True)\ndef example_task(self, data: dict[str, Any]) -> dict[str, Any]:\n    \"\"\"Example Celery task.\n    Args:\n        self: Task instance (bound)\n        data: Input data to process\n    Returns:",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.worker.tasks",
        "documentation": {}
    },
    {
        "label": "celery_app",
        "kind": 5,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.worker.tasks",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.worker.tasks",
        "peekOfCode": "celery_app = get_celery_client().app\n@celery_app.task(bind=True)\ndef example_task(self, data: dict[str, Any]) -> dict[str, Any]:\n    \"\"\"Example Celery task.\n    Args:\n        self: Task instance (bound)\n        data: Input data to process\n    Returns:\n        Processed result\n    Example:",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.worker.tasks",
        "documentation": {}
    },
    {
        "label": "ApplicationConfig",
        "kind": 6,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "peekOfCode": "class ApplicationConfig(BaseSettings):\n    \"\"\"Application configuration.\"\"\"\n    name: str = \"{{cookiecutter.project_name}}\"\n    version: str = Field(default_factory=_get_version)\n    log_level: int = logging.INFO\n    model_config = SettingsConfigDict(\n        env_prefix=SERVICE_NAME,\n        env_file=ROOT_DIR / \".env\",\n        env_file_encoding=\"utf-8\",\n        extra=\"ignore\",",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "documentation": {}
    },
    {
        "label": "UiConfig",
        "kind": 6,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "peekOfCode": "class UiConfig(BaseSettings):\n    APP_NAME: str = \"{{cookiecutter.project_name}}\"\n    DEBUG: bool = False\n    TESTING: bool = False\n    HOST: str = \"0.0.0.0\"\n    PORT: int = 8080\n    # API Configuration for connecting to the CSV2JSON API\n    API_URL: str = Field(default=\"http://localhost:5000\")\n    model_config = SettingsConfigDict(\n        env_prefix=\"\",",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "documentation": {}
    },
    {
        "label": "OpenRouterAPIConfig",
        "kind": 6,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "peekOfCode": "class OpenRouterAPIConfig(BaseSettings):\n    \"\"\"OpenRouter API configuration.\"\"\"\n    api_key: str = Field(alias=\"OPENROUTER_TOKEN\")\n    base_url: str = Field(default=\"https://openrouter.ai/api/v1\", alias=\"OPENROUTER_BASE_URL\")\n    available_models: str = Field(default=\"\", alias=\"AVAILABLE_MODELS\")\n    default_model: str = Field(default=\"\", alias=\"DEFAULT_MODEL\")\n    model_config = SettingsConfigDict(\n        env_prefix=\"\",\n        env_file=ROOT_DIR / \".env\",\n        env_file_encoding=\"utf-8\",",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "documentation": {}
    },
    {
        "label": "MCPConfig",
        "kind": 6,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "peekOfCode": "class MCPConfig(BaseSettings):\n    \"\"\"MCP server configuration.\"\"\"\n    server_url: str | None = Field(default=None, alias=\"MCP_SERVER_URL\")\n    model_config = SettingsConfigDict(\n        env_prefix=\"\",\n        env_file=ROOT_DIR / \".env\",\n        env_file_encoding=\"utf-8\",\n        extra=\"ignore\",\n    )\nclass ServiceAPIConfig(BaseSettings):",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "documentation": {}
    },
    {
        "label": "ServiceAPIConfig",
        "kind": 6,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "peekOfCode": "class ServiceAPIConfig(BaseSettings):\n    \"\"\"Service API configuration.\"\"\"\n    api_url: str = Field(default=\"https://api.mbxai.cloud/api\", alias=\"MBXAI_API_URL\")\n    token: str = Field(default=\"\", alias=\"MBXAI_API_TOKEN\")\n    service_namespace: str = Field(default=\"mbxai-srv\", alias=\"SERVICE_NAMESPACE\")\n    model_config = SettingsConfigDict(\n        env_prefix=\"\",\n        env_file=ROOT_DIR / \".env\",\n        env_file_encoding=\"utf-8\",\n        extra=\"ignore\",",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "documentation": {}
    },
    {
        "label": "OpenAIConfig",
        "kind": 6,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "peekOfCode": "class OpenAIConfig(BaseSettings):\n    \"\"\"OpenAI API configuration.\"\"\"\n    api_key: str = Field(alias=\"OPENAI_API_KEY\")\n    embedding_model: str = Field(default=\"text-embedding-3-small\", alias=\"OPENAI_EMBEDDING_MODEL\")\n    organization: str | None = Field(default=None, alias=\"OPENAI_ORGANIZATION\")\n    model_config = SettingsConfigDict(\n        env_prefix=\"\",\n        env_file=ROOT_DIR / \".env\",\n        env_file_encoding=\"utf-8\",\n        extra=\"ignore\",",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "documentation": {}
    },
    {
        "label": "ChromaDBConfig",
        "kind": 6,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "peekOfCode": "class ChromaDBConfig(BaseSettings):\n    \"\"\"ChromaDB configuration.\"\"\"\n    persist_directory: str = Field(default=\"./chroma_db\", alias=\"CHROMA_PERSIST_DIRECTORY\")\n    host: str | None = Field(default=None, alias=\"CHROMA_HOST\")\n    port: int | None = Field(default=None, alias=\"CHROMA_PORT\")\n    ssl: bool = Field(default=False, alias=\"CHROMA_SSL\")\n    headers: dict[str, str] | None = Field(default=None, alias=\"CHROMA_HEADERS\")\n    # Authentication settings\n    auth_token: str | None = Field(default=None, alias=\"CHROMA_AUTH_TOKEN\")\n    auth_token_type: str = Field(default=\"Bearer\", alias=\"CHROMA_AUTH_TOKEN_TYPE\")",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "documentation": {}
    },
    {
        "label": "RabbitMQConfig",
        "kind": 6,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "peekOfCode": "class RabbitMQConfig(BaseSettings):\n    \"\"\"RabbitMQ configuration for Celery.\"\"\"\n    host: str = Field(default=\"localhost\", alias=\"RABBITMQ_HOST\")\n    port: int = Field(default=5672, alias=\"RABBITMQ_PORT\")\n    username: str = Field(default=\"guest\", alias=\"RABBITMQ_USERNAME\")\n    password: str = Field(default=\"guest\", alias=\"RABBITMQ_PASSWORD\")\n    virtual_host: str = Field(default=\"/\", alias=\"RABBITMQ_VHOST\")\n    ssl: bool = Field(default=False, alias=\"RABBITMQ_SSL\")\n    model_config = SettingsConfigDict(\n        env_prefix=\"\",",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "documentation": {}
    },
    {
        "label": "RedisConfig",
        "kind": 6,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "peekOfCode": "class RedisConfig(BaseSettings):\n    \"\"\"Redis configuration for Celery results backend.\"\"\"\n    host: str = Field(default=\"localhost\", alias=\"REDIS_HOST\")\n    port: int = Field(default=6379, alias=\"REDIS_PORT\")\n    password: str | None = Field(default=None, alias=\"REDIS_PASSWORD\")\n    db: int = Field(default=0, alias=\"REDIS_DB\")\n    ssl: bool = Field(default=False, alias=\"REDIS_SSL\")\n    model_config = SettingsConfigDict(\n        env_prefix=\"\",\n        env_file=ROOT_DIR / \".env\",",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "documentation": {}
    },
    {
        "label": "CeleryConfig",
        "kind": 6,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "peekOfCode": "class CeleryConfig(BaseSettings):\n    \"\"\"Celery configuration.\"\"\"\n    task_serializer: str = Field(default=\"json\", alias=\"CELERY_TASK_SERIALIZER\")\n    result_serializer: str = Field(default=\"json\", alias=\"CELERY_RESULT_SERIALIZER\")\n    accept_content: list[str] = Field(default=[\"json\"], alias=\"CELERY_ACCEPT_CONTENT\")\n    result_expires: int = Field(default=3600, alias=\"CELERY_RESULT_EXPIRES\")  # 1 hour\n    timezone: str = Field(default=\"UTC\", alias=\"CELERY_TIMEZONE\")\n    enable_utc: bool = Field(default=True, alias=\"CELERY_ENABLE_UTC\")\n    task_track_started: bool = Field(default=True, alias=\"CELERY_TASK_TRACK_STARTED\")\n    task_time_limit: int = Field(default=300, alias=\"CELERY_TASK_TIME_LIMIT\")  # 5 minutes",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "documentation": {}
    },
    {
        "label": "get_config",
        "kind": 2,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "peekOfCode": "def get_config() -> ApplicationConfig:\n    \"\"\"Get the application configuration singleton.\"\"\"\n    return ApplicationConfig()\n@lru_cache\ndef get_ui_config() -> UiConfig:\n    \"\"\"Get the application configuration singleton.\"\"\"\n    return UiConfig()\n@lru_cache\ndef get_openrouter_api_config() -> OpenRouterAPIConfig:\n    \"\"\"Get the OpenRouter API configuration singleton.\"\"\"",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "documentation": {}
    },
    {
        "label": "get_ui_config",
        "kind": 2,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "peekOfCode": "def get_ui_config() -> UiConfig:\n    \"\"\"Get the application configuration singleton.\"\"\"\n    return UiConfig()\n@lru_cache\ndef get_openrouter_api_config() -> OpenRouterAPIConfig:\n    \"\"\"Get the OpenRouter API configuration singleton.\"\"\"\n    return OpenRouterAPIConfig()\n@lru_cache\ndef get_mcp_config() -> MCPConfig:\n    \"\"\"Get the MCP configuration singleton.\"\"\"",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "documentation": {}
    },
    {
        "label": "get_openrouter_api_config",
        "kind": 2,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "peekOfCode": "def get_openrouter_api_config() -> OpenRouterAPIConfig:\n    \"\"\"Get the OpenRouter API configuration singleton.\"\"\"\n    return OpenRouterAPIConfig()\n@lru_cache\ndef get_mcp_config() -> MCPConfig:\n    \"\"\"Get the MCP configuration singleton.\"\"\"\n    return MCPConfig()\n@lru_cache\ndef get_service_api_config() -> ServiceAPIConfig:\n    \"\"\"Get the service api configuration singleton.\"\"\"",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "documentation": {}
    },
    {
        "label": "get_mcp_config",
        "kind": 2,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "peekOfCode": "def get_mcp_config() -> MCPConfig:\n    \"\"\"Get the MCP configuration singleton.\"\"\"\n    return MCPConfig()\n@lru_cache\ndef get_service_api_config() -> ServiceAPIConfig:\n    \"\"\"Get the service api configuration singleton.\"\"\"\n    return ServiceAPIConfig()\n@lru_cache\ndef get_openai_config() -> OpenAIConfig:\n    \"\"\"Get the OpenAI configuration singleton.\"\"\"",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "documentation": {}
    },
    {
        "label": "get_service_api_config",
        "kind": 2,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "peekOfCode": "def get_service_api_config() -> ServiceAPIConfig:\n    \"\"\"Get the service api configuration singleton.\"\"\"\n    return ServiceAPIConfig()\n@lru_cache\ndef get_openai_config() -> OpenAIConfig:\n    \"\"\"Get the OpenAI configuration singleton.\"\"\"\n    return OpenAIConfig()\n@lru_cache\ndef get_chromadb_config() -> ChromaDBConfig:\n    \"\"\"Get the ChromaDB configuration singleton.\"\"\"",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "documentation": {}
    },
    {
        "label": "get_openai_config",
        "kind": 2,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "peekOfCode": "def get_openai_config() -> OpenAIConfig:\n    \"\"\"Get the OpenAI configuration singleton.\"\"\"\n    return OpenAIConfig()\n@lru_cache\ndef get_chromadb_config() -> ChromaDBConfig:\n    \"\"\"Get the ChromaDB configuration singleton.\"\"\"\n    return ChromaDBConfig()\n@lru_cache\ndef get_rabbitmq_config() -> RabbitMQConfig:\n    \"\"\"Get the RabbitMQ configuration singleton.\"\"\"",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "documentation": {}
    },
    {
        "label": "get_chromadb_config",
        "kind": 2,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "peekOfCode": "def get_chromadb_config() -> ChromaDBConfig:\n    \"\"\"Get the ChromaDB configuration singleton.\"\"\"\n    return ChromaDBConfig()\n@lru_cache\ndef get_rabbitmq_config() -> RabbitMQConfig:\n    \"\"\"Get the RabbitMQ configuration singleton.\"\"\"\n    return RabbitMQConfig()\n@lru_cache\ndef get_redis_config() -> RedisConfig:\n    \"\"\"Get the Redis configuration singleton.\"\"\"",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "documentation": {}
    },
    {
        "label": "get_rabbitmq_config",
        "kind": 2,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "peekOfCode": "def get_rabbitmq_config() -> RabbitMQConfig:\n    \"\"\"Get the RabbitMQ configuration singleton.\"\"\"\n    return RabbitMQConfig()\n@lru_cache\ndef get_redis_config() -> RedisConfig:\n    \"\"\"Get the Redis configuration singleton.\"\"\"\n    return RedisConfig()\n@lru_cache\ndef get_celery_config() -> CeleryConfig:\n    \"\"\"Get the Celery configuration singleton.\"\"\"",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "documentation": {}
    },
    {
        "label": "get_redis_config",
        "kind": 2,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "peekOfCode": "def get_redis_config() -> RedisConfig:\n    \"\"\"Get the Redis configuration singleton.\"\"\"\n    return RedisConfig()\n@lru_cache\ndef get_celery_config() -> CeleryConfig:\n    \"\"\"Get the Celery configuration singleton.\"\"\"\n    return CeleryConfig()",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "documentation": {}
    },
    {
        "label": "get_celery_config",
        "kind": 2,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "peekOfCode": "def get_celery_config() -> CeleryConfig:\n    \"\"\"Get the Celery configuration singleton.\"\"\"\n    return CeleryConfig()",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "documentation": {}
    },
    {
        "label": "ROOT_DIR",
        "kind": 5,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "peekOfCode": "ROOT_DIR = Path(__file__).parent.parent.parent\nSERVICE_NAME = \"{{cookiecutter.project_slug.upper()}}_\"\ndef _get_version() -> str:\n    \"\"\"Get the package version.\"\"\"\n    try:\n        return importlib.metadata.version(\"{{cookiecutter.package_name}}\")\n    except importlib.metadata.PackageNotFoundError:\n        return \"0.1.0\"  # Default during development\nclass ApplicationConfig(BaseSettings):\n    \"\"\"Application configuration.\"\"\"",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "documentation": {}
    },
    {
        "label": "SERVICE_NAME",
        "kind": 5,
        "importPath": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "description": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "peekOfCode": "SERVICE_NAME = \"{{cookiecutter.project_slug.upper()}}_\"\ndef _get_version() -> str:\n    \"\"\"Get the package version.\"\"\"\n    try:\n        return importlib.metadata.version(\"{{cookiecutter.package_name}}\")\n    except importlib.metadata.PackageNotFoundError:\n        return \"0.1.0\"  # Default during development\nclass ApplicationConfig(BaseSettings):\n    \"\"\"Application configuration.\"\"\"\n    name: str = \"{{cookiecutter.project_name}}\"",
        "detail": "{{cookiecutter.project_slug}}.src.{{cookiecutter.package_name}}.config",
        "documentation": {}
    }
]