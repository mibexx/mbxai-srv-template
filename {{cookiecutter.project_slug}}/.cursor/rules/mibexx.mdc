---
description: General rules for MBXAI services
globs:
alwaysApply: true
---

## Python Version
- Always use Python 3.12 or higher
- Use always dict and list instead of Dict and List

## Application Architecture
- There are 3 main applications: api, mcp, and ui
    - api: API for the application in src/{{cookiecutter.package_name}}/api
    - mcp: MCP server for the application in src/{{cookiecutter.package_name}}/mcp
    - ui: UI for the application in src/{{cookiecutter.package_name}}/ui
- Logic in UI should use an endpoint in api with proxy in frontend app
- Be aware, that API, MCP, UI and WORKER will be executed in different pod with different file system. There is no shared storage.

## API Design
- All endpoints must have ONE pydantic model as request and response
- All project endpoints in api must be method "post"

## Business Logic
- Logic should be in dedicated classes in the utils/*/ folder
- Models should be seperated in it's own files in the models/ folder
- Adapter to use business logic should always be in the worker/ folder as celery tasks
- When an API endpoint is requested, it should use the celery_client to trigger the task, don't use the logic directly

## SOLID
- Always try to keep SOLID - Each logic into it's own class
- Don't write logic in API endpoints or tasks, extract them into own service classes

## UI Logic
- Implement (proxy) endpoints always first in the ui app
- In app, use celery_client to trigger the requested task

## AI
- To send requests to AI, check the client.py and use (if nothing else is requested) the get_mcp_client function
- Use always the "parse" method of the client
- Use the AsyncMcpClient (get_mcp_client) and implement it well

## Development Practices
- Never write tests when it's not explicitly required
- Never write documentation when it's not explicitly required (no markdown files)

## Process
- Always use the following process:
    - Understand the problem
    - Analyze the code
    - Create a solution approach
    - Implement the solution
    - Try to keep simple
    - Don't write tests when it's not explicitly required
    - Never refactor without a specific reason
    - Try to avoid bigger changes without a specific reason